function module(t){try{return angular.module(t)}catch(e){return angular.module(t,[])}}angular.module("yatayat",["ionic","ngCordova","yatayat.factories","yatayat.controllers"]).run(["$ionicPlatform","$cordovaSplashscreen",function(t,e){t.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault(),window.cordova&&setTimeout(function(){e.hide()},2e3)})}]).config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/start"),t.state("start",{url:"/start",templateUrl:"templates/start.html",controller:"StartCtrl"}).state("app",{url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"AppCtrl"}).state("app.posts",{url:"/posts",views:{menuContent:{templateUrl:"templates/posts.html",controller:"PostsCtrl"}}}).state("app.post",{url:"/posts/:postId",views:{menuContent:{templateUrl:"templates/post.html",controller:"PostCtrl"}}}).state("app.report",{url:"/report",views:{menuContent:{templateUrl:"templates/report.html",controller:"ReportCtrl"}}}).state("app.search",{url:"/search",views:{menuContent:{templateUrl:"templates/search.html",controller:"SearchCtrl"}}})}]).config(["$httpProvider",function(t){t.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded"}]),module("yatayat.controllers").controller("AppCtrl",["$scope","$rootScope","Modal","$timeout",function(t,e,o,r){t.loginData={},o.setup(t,"templates/login.html"),t.login=function(){t.showModal()},t.closeLogin=function(){t.closeModal()},t.doLogin=function(){console.log("Doing login",t.loginData),r(function(){t.closeLogin()},1e3)}}]),module("yatayat.controllers").controller("PostCtrl",["$scope","$stateParams","Post",function(t,e,o){t.post={},o.get(e.postId,function(e){t.post=e})}]),module("yatayat.controllers").controller("PostsCtrl",["$scope","Post",function(t,e){t.posts=[],e.all(function(e){t.posts=e}),t.likePost=function(t,e){e.preventDefault()},t.editPost=function(t,e){e.preventDefault()}}]),module("yatayat.controllers").controller("ReportCtrl",["$scope","$stateParams",function(){}]),module("yatayat.controllers").controller("SearchCtrl",["$scope","$stateParams",function(){}]),module("yatayat.controllers").controller("StartCtrl",["$scope","$rootScope","User","Sim","Modal","Navigator","Loading","$ionicPopup","Validator",function(t,e,o,r,n,a,i,l){i.show(),n.setup(t,"templates/tos.html"),t.enterMain=function(t){e.userId=t,a.go("app.posts",!0)},o.checkRegistration().then(function(e){i.hide(),t.enterMain(e.sim_serial_number)},function(){i.hide()}),t.registerWithCredentials=function(e,r){o.register(e,r).then(function(){l.alert({title:"Success",template:e+" registered successfully."}).then(function(){t.enterMain(e)})})},t.register=function(){i.show(),r.getDetails().then(function(e){i.hide(),t.registerWithCredentials(e.simSerialNumber,e.line1Number)})}}]),module("yatayat.factories").factory("BaseModel",[function(){return{build:function(t){var e=Object.create(this);return angular.extend(e,t),e}}}]),module("yatayat.factories").factory("Loading",["$ionicLoading",function(t){return{show:function(){t.show({template:"<img src='img/spinner.gif'>"})},hide:function(){t.hide()}}}]),module("yatayat.factories").factory("Modal",["$ionicModal",function(t){return{setup:function(e,o){t.fromTemplateUrl(o,{scope:e}).then(function(t){e.modal=t}),e.closeModal=function(){e.modal.hide()},e.showModal=function(){e.modal.show()}}}}]),module("yatayat.factories").factory("Navigator",["$state","$ionicViewService",function(t,e){return{go:function(o,r){t.go(o).then(function(){r&&e.clearHistory()})}}}]),module("yatayat.factories").factory("Post",["BaseModel","Raven",function(t){var e=[{id:1,title:"Accident at Koteshwor",description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."},{id:2,title:"Road Block at Sallaghari",description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}];return angular.extend(t,{all:function(o){var r=[];angular.forEach(e,function(e){r.push(t.build(e))}),o(r)},get:function(o,r){var n=e.filter(function(t){return t.id===parseInt(o)})[0];r(t.build(n))},descLength:function(){return this.description.length}})}]),module("yatayat.factories").factory("Raven",["$http","$q",function(t,e){var o="http://192.168.1.4:3000/";return{get:function(r){var n=e.defer();return t({url:o+r,method:"GET"}).then(function(t){n.resolve(t.data)},function(){n.reject()}),n.promise},post:function(r,n){var a=e.defer();return t({url:o+r,method:"POST",data:$.param(n)}).then(function(){a.resolve()},function(){a.reject()}),a.promise}}}]),module("yatayat.factories").factory("Sim",["$q",function(t){return{getDetails:function(){var e=t.defer();if("undefined"!=typeof cordova){var o=cordova.require("cordova/plugin/telephonenumber");o.get(function(t){e.resolve(t)})}else e.resolve({simSerialNumber:"nanu"});return e.promise}}}]),module("yatayat.factories").factory("User",["Raven","$q","Sim",function(t,e,o){return{checkRegistration:function(){var r=e.defer();return o.getDetails().then(function(e){t.get("users/"+e.simSerialNumber).then(function(t){t.id?r.resolve(t):r.reject()},function(){r.reject()})}),r.promise},register:function(o,r){var n=e.defer(),a={};return a.sim_serial_number=o,r&&(a.phone_number=r),t.post("users",{user:a}).then(function(){n.resolve()}),n.promise}}}]),module("yatayat.factories").factory("Validator",[function(){return{isValidPhone:function(t){var e=/^\d{10}$/;return t.match(e)}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQuanMiLCJhcHAuanMiLCJjb250cm9sbGVycy9hcHBfY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3Bvc3RfY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3Bvc3RzX2NvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9yZXBvcnRfY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3NlYXJjaF9jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvc3RhcnRfY29udHJvbGxlci5qcyIsImZhY3Rvcmllcy9iYXNlX21vZGVsLmpzIiwiZmFjdG9yaWVzL2xvYWRpbmcuanMiLCJmYWN0b3JpZXMvbW9kYWwuanMiLCJmYWN0b3JpZXMvbmF2aWdhdG9yLmpzIiwiZmFjdG9yaWVzL3Bvc3QuanMiLCJmYWN0b3JpZXMvcmF2ZW4uanMiLCJmYWN0b3JpZXMvc2ltLmpzIiwiZmFjdG9yaWVzL3VzZXIuanMiLCJmYWN0b3JpZXMvdmFsaWRhdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQUEsUUFBQSxHQUNBLElBQ0EsTUFBQSxTQUFBLE9BQUEsR0FDQSxNQUFBLEdBQ0EsTUFBQSxTQUFBLE9BQUEsT0NNQSxRQUFBLE9BQUEsV0FBQSxRQUFBLFlBQUEsb0JBQUEsd0JBRUEsS0FBQSxpQkFBQSx1QkFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE1BQUEsV0FHQSxPQUFBLFNBQUEsT0FBQSxRQUFBLFFBQUEsVUFDQSxRQUFBLFFBQUEsU0FBQSwwQkFBQSxHQUVBLE9BQUEsV0FFQSxVQUFBLGVBR0EsT0FBQSxTQUFBLFdBQUEsV0FDQSxFQUFBLFFBQ0EsVUFHQSxRQUFBLGlCQUFBLHFCQUFBLFNBQUEsRUFBQSxHQUVBLEVBQUEsVUFBQSxVQUVBLEVBQ0EsTUFBQSxTQUNBLElBQUEsU0FDQSxZQUFBLHVCQUNBLFdBQUEsY0FHQSxNQUFBLE9BQ0EsSUFBQSxPQUNBLFlBQUEsRUFDQSxZQUFBLHNCQUNBLFdBQUEsWUFHQSxNQUFBLGFBQ0EsSUFBQSxTQUNBLE9BQ0EsYUFDQSxZQUFBLHVCQUNBLFdBQUEsZ0JBS0EsTUFBQSxZQUNBLElBQUEsaUJBQ0EsT0FDQSxhQUNBLFlBQUEsc0JBQ0EsV0FBQSxlQUtBLE1BQUEsY0FDQSxJQUFBLFVBQ0EsT0FDQSxhQUNBLFlBQUEsd0JBQ0EsV0FBQSxpQkFLQSxNQUFBLGNBQ0EsSUFBQSxVQUNBLE9BQ0EsYUFDQSxZQUFBLHdCQUNBLFdBQUEsb0JBTUEsUUFBQSxnQkFBQSxTQUFBLEdBRUEsRUFBQSxTQUFBLFFBQUEsS0FBQSxnQkFBQSx1Q0MxRkEsT0FBQSx1QkFFQSxXQUFBLFdBQUEsU0FBQSxhQUFBLFFBQUEsV0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBRUEsRUFBQSxhQUVBLEVBQUEsTUFBQSxFQUFBLHdCQUVBLEVBQUEsTUFBQSxXQUNBLEVBQUEsYUFJQSxFQUFBLFdBQUEsV0FDQSxFQUFBLGNBSUEsRUFBQSxRQUFBLFdBQ0EsUUFBQSxJQUFBLGNBQUEsRUFBQSxXQUlBLEVBQUEsV0FDQSxFQUFBLGNBQ0EsU0N6QkEsT0FBQSx1QkFFQSxXQUFBLFlBQUEsU0FBQSxlQUFBLE9BQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLFFBRUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxTQUFBLEdBQ0EsRUFBQSxLQUFBLE9DTkEsT0FBQSx1QkFFQSxXQUFBLGFBQUEsU0FBQSxPQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsU0FFQSxFQUFBLElBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxJQUdBLEVBQUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLGtCQUdBLEVBQUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLHFCQ2RBLE9BQUEsdUJBRUEsV0FBQSxjQUFBLFNBQUEsZUFBQSxlQ0ZBLE9BQUEsdUJBRUEsV0FBQSxjQUFBLFNBQUEsZUFBQSxlQ0ZBLE9BQUEsdUJBRUEsV0FBQSxhQUNBLFNBQUEsYUFBQSxPQUFBLE1BQUEsUUFBQSxZQUFBLFVBQUEsY0FBQSxZQUNBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUVBLEVBQUEsT0FDQSxFQUFBLE1BQUEsRUFBQSxzQkFFQSxFQUFBLFVBQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUNBLEVBQUEsR0FBQSxhQUFBLElBR0EsRUFBQSxvQkFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSxVQUFBLEVBQUEsb0JBQ0EsV0FDQSxFQUFBLFNBR0EsRUFBQSx3QkFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLFNBQUEsRUFBQSxHQUNBLEtBQUEsV0FDQSxFQUFBLE9BQ0EsTUFBQSxVQUNBLFNBQUEsRUFBQSw4QkFDQSxLQUFBLFdBQ0EsRUFBQSxVQUFBLFFBS0EsRUFBQSxTQUFBLFdBQ0EsRUFBQSxPQUNBLEVBQUEsYUFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSx3QkFBQSxFQUFBLGdCQUFBLEVBQUEsbUJDdkNBLE9BQUEscUJBRUEsUUFBQSxhQUFBLFdBQ0EsT0FFQSxNQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsT0FBQSxPQUFBLEtBRUEsT0FEQSxTQUFBLE9BQUEsRUFBQSxHQUNBLE9DUkEsT0FBQSxxQkFFQSxRQUFBLFdBQUEsZ0JBQUEsU0FBQSxHQUNBLE9BQ0EsS0FBQSxXQUNBLEVBQUEsTUFBQSxTQUFBLGlDQUdBLEtBQUEsV0FDQSxFQUFBLFlDVEEsT0FBQSxxQkFFQSxRQUFBLFNBQUEsY0FBQSxTQUFBLEdBQ0EsT0FPQSxNQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsZ0JBQUEsR0FDQSxNQUFBLElBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLElBR0EsRUFBQSxXQUFBLFdBQ0EsRUFBQSxNQUFBLFFBR0EsRUFBQSxVQUFBLFdBQ0EsRUFBQSxNQUFBLGFDdEJBLE9BQUEscUJBRUEsUUFBQSxhQUFBLFNBQUEsb0JBQUEsU0FBQSxFQUFBLEdBQ0EsT0FDQSxHQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsR0FBQSxHQUFBLEtBQUEsV0FDQSxHQUFBLEVBQUEsc0JDTkEsT0FBQSxxQkFFQSxRQUFBLFFBQUEsWUFBQSxRQUFBLFNBQUEsR0FDQSxHQUFBLEtBQ0EsR0FBQSxFQUFBLE1BQUEsd0JBQUEsWUFBQSxtY0FDQSxHQUFBLEVBQUEsTUFBQSwyQkFBQSxZQUFBLGtjQUdBLE9BQUEsU0FBQSxPQUFBLEdBQ0EsSUFBQSxTQUFBLEdBQ0EsR0FBQSxLQUNBLFNBQUEsUUFBQSxFQUFBLFNBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxNQUFBLE1BRUEsRUFBQSxJQUdBLElBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsT0FBQSxTQUFBLEdBQUEsTUFBQSxHQUFBLEtBQUEsU0FBQSxLQUFBLEVBQ0EsR0FBQSxFQUFBLE1BQUEsS0FHQSxXQUFBLFdBQ0EsTUFBQSxNQUFBLFlBQUEsYUN2QkEsT0FBQSxxQkFFQSxRQUFBLFNBQUEsUUFBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSwwQkFDQSxRQUNBLElBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BV0EsT0FUQSxJQUNBLElBQUEsRUFBQSxFQUNBLE9BQUEsUUFDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsRUFBQSxPQUNBLFdBQ0EsRUFBQSxXQUdBLEVBQUEsU0FHQSxLQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BWUEsT0FWQSxJQUNBLElBQUEsRUFBQSxFQUNBLE9BQUEsT0FDQSxLQUFBLEVBQUEsTUFBQSxLQUNBLEtBQUEsV0FDQSxFQUFBLFdBQ0EsV0FDQSxFQUFBLFdBR0EsRUFBQSxhQ2pDQSxPQUFBLHFCQUVBLFFBQUEsT0FBQSxLQUFBLFNBQUEsR0FDQSxPQUNBLFdBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxPQUNBLElBQUEsbUJBQUEsU0FBQSxDQUNBLEdBQUEsR0FBQSxRQUFBLFFBQUEsaUNBQ0EsR0FBQSxJQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsU0FHQSxHQUFBLFNBQUEsZ0JBQUEsUUFFQSxPQUFBLEdBQUEsYUNkQSxPQUFBLHFCQUVBLFFBQUEsUUFBQSxRQUFBLEtBQUEsTUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE9BQ0Esa0JBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxPQWNBLE9BYkEsR0FBQSxhQUNBLEtBQUEsU0FBQSxHQUNBLEVBQUEsSUFBQSxTQUFBLEVBQUEsaUJBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxHQUNBLEVBQUEsUUFBQSxHQUVBLEVBQUEsVUFFQSxXQUNBLEVBQUEsYUFHQSxFQUFBLFNBR0EsU0FBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxRQUVBLElBWUEsT0FYQSxHQUFBLGtCQUFBLEVBQ0EsSUFDQSxFQUFBLGFBQUEsR0FHQSxFQUFBLEtBQUEsU0FDQSxLQUFBLElBRUEsS0FBQSxXQUNBLEVBQUEsWUFFQSxFQUFBLGFDckNBLE9BQUEscUJBRUEsUUFBQSxhQUFBLFdBQ0EsT0FDQSxhQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsVUFDQSxPQUFBLEdBQUEsTUFBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBtb2R1bGUobmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBhbmd1bGFyLm1vZHVsZShuYW1lKVxuICB9IGNhdGNoKGVycikge1xuICAgIHJldHVybiBhbmd1bGFyLm1vZHVsZShuYW1lLCBbXSlcbiAgfVxufVxuXG4iLCIvLyBZYXRheWF0XG4vKipcbiAqIEBhdXRob3I6IGtvaXJhbGEuc2FkaXhhQGdtYWlsLmNvbVxuICogQHRlYW06IHlhdGF5YXRcbiAqIENvcHlyaWdodCAyMDE0LCBAc2FkaXhhbmFudVxuICoqL1xuLy8gYW5ndWxhci5tb2R1bGUgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyIG1vZHVsZXNcbi8vICd5YXRheWF0JyBpcyB0aGUgbmFtZSBvZiB0aGlzIGFuZ3VsYXIgbW9kdWxlIGV4YW1wbGUgKGFsc28gc2V0IGluIGEgPGJvZHk+IGF0dHJpYnV0ZSBpbiBpbmRleC5odG1sKVxuLy8gdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2YgJ3JlcXVpcmVzJ1xuLy8gJ3lhdGF5YXQuY29udHJvbGxlcnMnIGlzIGZvdW5kIGluIGNvbnRyb2xsZXJzLmpzXG5hbmd1bGFyLm1vZHVsZSgneWF0YXlhdCcsIFsnaW9uaWMnLCAnbmdDb3Jkb3ZhJywgJ3lhdGF5YXQuZmFjdG9yaWVzJywgJ3lhdGF5YXQuY29udHJvbGxlcnMnXSlcblxuLnJ1bihmdW5jdGlvbigkaW9uaWNQbGF0Zm9ybSwgJGNvcmRvdmFTcGxhc2hzY3JlZW4pIHtcbiAgJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgLy8gSGlkZSB0aGUgYWNjZXNzb3J5IGJhciBieSBkZWZhdWx0IChyZW1vdmUgdGhpcyB0byBzaG93IHRoZSBhY2Nlc3NvcnkgYmFyIGFib3ZlIHRoZSBrZXlib2FyZFxuICAgIC8vIGZvciBmb3JtIGlucHV0cylcbiAgICBpZih3aW5kb3cuY29yZG92YSAmJiB3aW5kb3cuY29yZG92YS5wbHVnaW5zLktleWJvYXJkKSB7XG4gICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgIH1cbiAgICBpZih3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICAvLyBvcmcuYXBhY2hlLmNvcmRvdmEuc3RhdHVzYmFyIHJlcXVpcmVkXG4gICAgICBTdGF0dXNCYXIuc3R5bGVEZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgd2luZG93LmNvcmRvdmEgJiYgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICRjb3Jkb3ZhU3BsYXNoc2NyZWVuLmhpZGUoKTtcbiAgICB9LCAyMDAwKTtcbiAgfSk7XG59KVxuLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gIC8vIGlmIG5vbmUgb2YgdGhlIGFib3ZlIHN0YXRlcyBhcmUgbWF0Y2hlZCwgdXNlIHRoaXMgYXMgdGhlIGZhbGxiYWNrXG4gICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9zdGFydCcpO1xuXG4gICRzdGF0ZVByb3ZpZGVyXG4gICAgLnN0YXRlKCdzdGFydCcsIHtcbiAgICAgIHVybDogJy9zdGFydCcsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9zdGFydC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXI6ICdTdGFydEN0cmwnXG4gICAgfSlcblxuICAgIC5zdGF0ZSgnYXBwJywge1xuICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL21lbnUuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiAnQXBwQ3RybCdcbiAgICB9KVxuXG4gICAgLnN0YXRlKCdhcHAucG9zdHMnLCB7XG4gICAgICB1cmw6ICcvcG9zdHMnLFxuICAgICAgdmlld3M6IHtcbiAgICAgICAgJ21lbnVDb250ZW50JyA6e1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3Bvc3RzLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLnN0YXRlKCdhcHAucG9zdCcsIHtcbiAgICAgIHVybDogJy9wb3N0cy86cG9zdElkJyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtZW51Q29udGVudCcgOntcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9wb3N0Lmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdQb3N0Q3RybCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAuc3RhdGUoJ2FwcC5yZXBvcnQnLCB7XG4gICAgICB1cmw6ICcvcmVwb3J0JyxcbiAgICAgIHZpZXdzOiB7XG4gICAgICAgICdtZW51Q29udGVudCcgOntcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9yZXBvcnQuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ1JlcG9ydEN0cmwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLnN0YXRlKCdhcHAuc2VhcmNoJywge1xuICAgICAgdXJsOiAnL3NlYXJjaCcsXG4gICAgICB2aWV3czoge1xuICAgICAgICAnbWVudUNvbnRlbnQnIDp7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvc2VhcmNoLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZWFyY2hDdHJsJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxufSlcbi5jb25maWcoWyckaHR0cFByb3ZpZGVyJywgZnVuY3Rpb24gKCRodHRwUHJvdmlkZXIpIHtcbiAgLy8gJGh0dHAucG9zdCBkb2Vzbid0IHNlbmQgZGF0YSBmaXhcbiAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG5cbiAgLy8gUmVzZXQgaGVhZGVycyB0byBhdm9pZCBPUFRJT05TIHJlcXVlc3QgKGFrYSBwcmVmbGlnaHQpXG4gIC8vICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb24gPSB7fTtcbiAgLy8gJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3QgPSB7fTtcbiAgLy8gJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dCA9IHt9O1xuICAvLyAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucGF0Y2ggPSB7fTtcbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuY29udHJvbGxlcnMnKVxuXG4uY29udHJvbGxlcignQXBwQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnTW9kYWwnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUsIE1vZGFsLCAkdGltZW91dCkge1xuICAvLyBGb3JtIGRhdGEgZm9yIHRoZSBsb2dpbiBtb2RhbFxuICAkc2NvcGUubG9naW5EYXRhID0ge307XG5cbiAgTW9kYWwuc2V0dXAoJHNjb3BlLCAndGVtcGxhdGVzL2xvZ2luLmh0bWwnKTtcblxuICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsKCk7XG4gIH1cblxuICAvLyBUcmlnZ2VyZWQgaW4gdGhlIGxvZ2luIG1vZGFsIHRvIGNsb3NlIGl0XG4gICRzY29wZS5jbG9zZUxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLmNsb3NlTW9kYWwoKTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIHRoZSBsb2dpbiBhY3Rpb24gd2hlbiB0aGUgdXNlciBzdWJtaXRzIHRoZSBsb2dpbiBmb3JtXG4gICRzY29wZS5kb0xvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ0RvaW5nIGxvZ2luJywgJHNjb3BlLmxvZ2luRGF0YSk7XG5cbiAgICAvLyBTaW11bGF0ZSBhIGxvZ2luIGRlbGF5LiBSZW1vdmUgdGhpcyBhbmQgcmVwbGFjZSB3aXRoIHlvdXIgbG9naW5cbiAgICAvLyBjb2RlIGlmIHVzaW5nIGEgbG9naW4gc3lzdGVtXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuY2xvc2VMb2dpbigpO1xuICAgIH0sIDEwMDApO1xuICB9O1xufV0pXG5cbiIsIm1vZHVsZSgneWF0YXlhdC5jb250cm9sbGVycycpXG5cbi5jb250cm9sbGVyKCdQb3N0Q3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsICdQb3N0JywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMsIFBvc3QpIHtcbiAgJHNjb3BlLnBvc3QgPSB7fTtcblxuICBQb3N0LmdldCgkc3RhdGVQYXJhbXMucG9zdElkLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgJHNjb3BlLnBvc3QgPSBkYXRhO1xuICB9KTtcbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuY29udHJvbGxlcnMnKVxuXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgWyckc2NvcGUnLCAnUG9zdCcsIGZ1bmN0aW9uKCRzY29wZSwgUG9zdCkge1xuICAkc2NvcGUucG9zdHMgPSBbXTtcblxuICBQb3N0LmFsbChmdW5jdGlvbihkYXRhKSB7XG4gICAgJHNjb3BlLnBvc3RzID0gZGF0YTtcbiAgfSk7XG5cbiAgJHNjb3BlLmxpa2VQb3N0ID0gZnVuY3Rpb24oJGluZGV4LCAkZXZlbnQpIHtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICAkc2NvcGUuZWRpdFBvc3QgPSBmdW5jdGlvbigkaW5kZXgsICRldmVudCkge1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xufV0pXG5cbiIsIm1vZHVsZSgneWF0YXlhdC5jb250cm9sbGVycycpXG5cbi5jb250cm9sbGVyKCdSZXBvcnRDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMpIHtcbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuY29udHJvbGxlcnMnKVxuXG4uY29udHJvbGxlcignU2VhcmNoQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG59XSlcblxuIiwibW9kdWxlKCd5YXRheWF0LmNvbnRyb2xsZXJzJylcblxuLmNvbnRyb2xsZXIoJ1N0YXJ0Q3RybCcsXG4gIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnVXNlcicsICdTaW0nLCAnTW9kYWwnLCAnTmF2aWdhdG9yJywgJ0xvYWRpbmcnLCAnJGlvbmljUG9wdXAnLCAnVmFsaWRhdG9yJyxcbiAgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCBVc2VyLCBTaW0sIE1vZGFsLCBOYXZpZ2F0b3IsIExvYWRpbmcsICRpb25pY1BvcHVwLCBWYWxpZGF0b3IpIHtcblxuICBMb2FkaW5nLnNob3coKTtcbiAgTW9kYWwuc2V0dXAoJHNjb3BlLCAndGVtcGxhdGVzL3Rvcy5odG1sJyk7XG5cbiAgJHNjb3BlLmVudGVyTWFpbiA9IGZ1bmN0aW9uKHNpbVNlcmlhbE51bWJlcikge1xuICAgICRyb290U2NvcGUudXNlcklkID0gc2ltU2VyaWFsTnVtYmVyO1xuICAgIE5hdmlnYXRvci5nbygnYXBwLnBvc3RzJywgdHJ1ZSk7XG4gIH07XG5cbiAgVXNlci5jaGVja1JlZ2lzdHJhdGlvbigpXG4gIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICBMb2FkaW5nLmhpZGUoKTtcbiAgICAkc2NvcGUuZW50ZXJNYWluKHVzZXIuc2ltX3NlcmlhbF9udW1iZXIpO1xuICB9LCBmdW5jdGlvbigpIHtcbiAgICBMb2FkaW5nLmhpZGUoKTtcbiAgfSk7XG5cbiAgJHNjb3BlLnJlZ2lzdGVyV2l0aENyZWRlbnRpYWxzID0gZnVuY3Rpb24oc2ltU2VyaWFsTnVtYmVyLCBwaG9uZU51bWJlcikge1xuICAgIFVzZXIucmVnaXN0ZXIoc2ltU2VyaWFsTnVtYmVyLCBwaG9uZU51bWJlcilcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgdGVtcGxhdGU6IHNpbVNlcmlhbE51bWJlciArICcgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHkuJ1xuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLmVudGVyTWFpbihzaW1TZXJpYWxOdW1iZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgTG9hZGluZy5zaG93KCk7XG4gICAgU2ltLmdldERldGFpbHMoKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgTG9hZGluZy5oaWRlKCk7XG4gICAgICAkc2NvcGUucmVnaXN0ZXJXaXRoQ3JlZGVudGlhbHMocmVzdWx0LnNpbVNlcmlhbE51bWJlciwgcmVzdWx0LmxpbmUxTnVtYmVyKTtcbiAgICB9KTtcbiAgfTtcbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuZmFjdG9yaWVzJylcblxuLmZhY3RvcnkoJ0Jhc2VNb2RlbCcsIFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBleHRlbmQgYW5ndWxhciBmYWN0b3J5IG9iamVjdChtb2RlbCkgd2l0aCBhbnkgJ21vZGVsIGxpa2UnIG9iamVjdChkYXRhKVxuICAgIGJ1aWxkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbW9kZWwgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgYW5ndWxhci5leHRlbmQobW9kZWwsIGRhdGEpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cbiAgfVxufV0pXG5cbiIsIm1vZHVsZSgneWF0YXlhdC5mYWN0b3JpZXMnKVxuXG4uZmFjdG9yeSgnTG9hZGluZycsIFsnJGlvbmljTG9hZGluZycsIGZ1bmN0aW9uKCRpb25pY0xvYWRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICRpb25pY0xvYWRpbmcuc2hvdyh7dGVtcGxhdGU6IFwiPGltZyBzcmM9J2ltZy9zcGlubmVyLmdpZic+XCJ9KTtcbiAgICB9LFxuXG4gICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICB9XG4gIH1cbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuZmFjdG9yaWVzJylcblxuLmZhY3RvcnkoJ01vZGFsJywgWyckaW9uaWNNb2RhbCcsIGZ1bmN0aW9uKCRpb25pY01vZGFsKSB7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogU2V0dXAgYSBtb2RhbCBmb3IgYW55IGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW1zOlxuICAgICAqICRzY29wZSBbT2JqZWN0XSB0aGUgY29udHJvbGxlcidzIHNjb3BlIG9iamVjdFxuICAgICAqIHRlbXBsYXRlVXJsIFtTdHJpbmddIHRoZSBwYXRoIHRvIHRoZSBtb2RhbCB0ZW1wbGF0ZVxuICAgICAqKi9cbiAgICBzZXR1cDogZnVuY3Rpb24oJHNjb3BlLCB0ZW1wbGF0ZVVybCkge1xuICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKHRlbXBsYXRlVXJsLCB7XG4gICAgICAgIHNjb3BlOiAkc2NvcGVcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgJHNjb3BlLm1vZGFsID0gbW9kYWw7XG4gICAgICB9KTtcblxuICAgICAgJHNjb3BlLmNsb3NlTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLm1vZGFsLmhpZGUoKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5zaG93TW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLm1vZGFsLnNob3coKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG59XSlcblxuIiwibW9kdWxlKCd5YXRheWF0LmZhY3RvcmllcycpXG5cbi5mYWN0b3J5KCdOYXZpZ2F0b3InLCBbJyRzdGF0ZScsICckaW9uaWNWaWV3U2VydmljZScsIGZ1bmN0aW9uKCRzdGF0ZSwgJGlvbmljVmlld1NlcnZpY2UpIHtcbiAgcmV0dXJuIHtcbiAgICBnbzogZnVuY3Rpb24oc3RhdGUsIGNsZWFySGlzdG9yeSkge1xuICAgICAgJHN0YXRlLmdvKHN0YXRlKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhckhpc3RvcnkgJiYgJGlvbmljVmlld1NlcnZpY2UuY2xlYXJIaXN0b3J5KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuZmFjdG9yaWVzJylcblxuLmZhY3RvcnkoJ1Bvc3QnLCBbJ0Jhc2VNb2RlbCcsICdSYXZlbicsIGZ1bmN0aW9uKEJhc2VNb2RlbCwgUmF2ZW4pIHtcbiAgdmFyIHBvc3RzID0gW1xuICAgIHsgaWQ6IDEsIHRpdGxlOiAnQWNjaWRlbnQgYXQgS290ZXNod29yJywgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLid9LFxuICAgIHsgaWQ6IDIsIHRpdGxlOiAnUm9hZCBCbG9jayBhdCBTYWxsYWdoYXJpJywgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLid9LFxuICBdO1xuXG4gIHJldHVybiBhbmd1bGFyLmV4dGVuZChCYXNlTW9kZWwsIHtcbiAgICBhbGw6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHBvc3RzLCBmdW5jdGlvbihwb3N0KSB7XG4gICAgICAgIGRhdGEucHVzaChCYXNlTW9kZWwuYnVpbGQocG9zdCkpO1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICB9LFxuXG4gICAgZ2V0OiBmdW5jdGlvbihpZCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdHMuZmlsdGVyKGZ1bmN0aW9uKG0pIHsgcmV0dXJuIG0uaWQgPT09IHBhcnNlSW50KGlkKSB9KVswXTtcbiAgICAgIGNhbGxiYWNrKEJhc2VNb2RlbC5idWlsZChkYXRhKSk7XG4gICAgfSxcblxuICAgIGRlc2NMZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24ubGVuZ3RoO1xuICAgIH1cbiAgfSk7IC8vIGVuZCBhbmd1bGFyLmV4dGVuZC4uXG59XSlcblxuIiwibW9kdWxlKCd5YXRheWF0LmZhY3RvcmllcycpXG5cbi5mYWN0b3J5KCdSYXZlbicsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbigkaHR0cCwgJHEpIHtcbiAgdmFyIGJhc2VVcmwgPSAnaHR0cDovLzE5Mi4xNjguMS40OjMwMDAvJztcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRodHRwKHtcbiAgICAgICAgdXJsOiBiYXNlVXJsICsgcGF0aCxcbiAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgZGVmZXIucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgZGVmZXIucmVqZWN0KCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfSxcblxuICAgIHBvc3Q6IGZ1bmN0aW9uKHBhdGgsIGRhdGEpIHtcbiAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRodHRwKHtcbiAgICAgICAgdXJsOiBiYXNlVXJsICsgcGF0aCxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGRhdGE6ICQucGFyYW0oZGF0YSksXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBkZWZlci5yZXNvbHZlKCk7XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgZGVmZXIucmVqZWN0KCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfVxuICB9XG59XSlcblxuIiwibW9kdWxlKCd5YXRheWF0LmZhY3RvcmllcycpXG5cbi5mYWN0b3J5KCdTaW0nLCBbJyRxJywgZnVuY3Rpb24oJHEpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXREZXRhaWxzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG4gICAgICBpZih0eXBlb2YgY29yZG92YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIHRlbGVwaG9uZU51bWJlciA9IGNvcmRvdmEucmVxdWlyZSgnY29yZG92YS9wbHVnaW4vdGVsZXBob25lbnVtYmVyJyk7XG4gICAgICAgIHRlbGVwaG9uZU51bWJlci5nZXQoZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgZGVmZXIucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmVyLnJlc29sdmUoe3NpbVNlcmlhbE51bWJlcjogJ25hbnUnfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gIH1cbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuZmFjdG9yaWVzJylcblxuLmZhY3RvcnkoJ1VzZXInLCBbJ1JhdmVuJywgJyRxJywgJ1NpbScsIGZ1bmN0aW9uKFJhdmVuLCAkcSwgU2ltKSB7XG4gIHJldHVybiB7XG4gICAgY2hlY2tSZWdpc3RyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcbiAgICAgIFNpbS5nZXREZXRhaWxzKClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBSYXZlbi5nZXQoJ3VzZXJzLycgKyByZXN1bHQuc2ltU2VyaWFsTnVtYmVyKVxuICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgaWYodXNlci5pZCkge1xuICAgICAgICAgICAgZGVmZXIucmVzb2x2ZSh1c2VyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmZXIucmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWZlci5yZWplY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xuICAgIH0sXG5cbiAgICByZWdpc3RlcjogZnVuY3Rpb24oc2ltU2VyaWFsTnVtYmVyLCBwaG9uZU51bWJlcikge1xuICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcblxuICAgICAgdmFyIHJlZ19pbmZvID0ge307XG4gICAgICByZWdfaW5mby5zaW1fc2VyaWFsX251bWJlciA9IHNpbVNlcmlhbE51bWJlcjtcbiAgICAgIGlmKHBob25lTnVtYmVyKSB7XG4gICAgICAgIHJlZ19pbmZvLnBob25lX251bWJlciA9IHBob25lTnVtYmVyO1xuICAgICAgfVxuXG4gICAgICBSYXZlbi5wb3N0KCd1c2VycycsIHtcbiAgICAgICAgdXNlcjogcmVnX2luZm9cbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgZGVmZXIucmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gIH1cbn1dKVxuXG4iLCJtb2R1bGUoJ3lhdGF5YXQuZmFjdG9yaWVzJylcblxuLmZhY3RvcnkoJ1ZhbGlkYXRvcicsIFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBpc1ZhbGlkUGhvbmU6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgdmFyIHBob25lUmVnRXggPSAvXlxcZHsxMH0kLztcbiAgICAgIHJldHVybiBudW1iZXIubWF0Y2gocGhvbmVSZWdFeCk7XG4gICAgfVxuICB9XG59XSlcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9