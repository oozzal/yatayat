function module(t){try{return angular.module(t)}catch(e){return angular.module(t,[])}}angular.module("yatayat",["ionic","ngCordova","yatayat.factories","yatayat.controllers"]).run(["$ionicPlatform","$cordovaSplashscreen",function(t,e){t.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault(),window.cordova&&setTimeout(function(){e.hide()},2e3)})}]).config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/start"),t.state("start",{url:"/start",templateUrl:"templates/start.html",controller:"StartCtrl"}).state("app",{url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"AppCtrl"}).state("app.posts",{url:"/posts",views:{menuContent:{templateUrl:"templates/posts.html",controller:"PostsCtrl"}}}).state("app.post",{url:"/posts/:postId",views:{menuContent:{templateUrl:"templates/post.html",controller:"PostCtrl"}}}).state("app.report",{url:"/report",views:{menuContent:{templateUrl:"templates/report.html",controller:"ReportCtrl"}}}).state("app.search",{url:"/search",views:{menuContent:{templateUrl:"templates/search.html",controller:"SearchCtrl"}}})}]),module("yatayat.controllers").controller("AppCtrl",["$scope","Modal","$timeout",function(t,e,o){t.loginData={},e.setup(t,"templates/login.html"),t.login=function(){t.showModal()},t.closeLogin=function(){t.closeModal()},t.doLogin=function(){console.log("Doing login",t.loginData),o(function(){t.closeLogin()},1e3)}}]),module("yatayat.controllers").controller("PostCtrl",["$scope","$stateParams","Post",function(t,e,o){t.post={},o.get(e.postId,function(e){t.post=e})}]),module("yatayat.controllers").controller("PostsCtrl",["$scope","Post",function(t,e){t.posts=[],e.all(function(e){t.posts=e}),t.likePost=function(t,e){e.preventDefault()},t.editPost=function(t,e){e.preventDefault()}}]),module("yatayat.controllers").controller("ReportCtrl",["$scope","$stateParams",function(){}]),module("yatayat.controllers").controller("SearchCtrl",["$scope","$stateParams",function(){}]),module("yatayat.controllers").controller("StartCtrl",["$scope","Navigator","Modal","User","$ionicLoading","$ionicPopup","Validator",function(t,e,o,r,n,a,i){o.setup(t,"templates/tos.html"),t.enterMain=function(){e.go("app.posts",!0)},r.checkRegistration().then(function(){}),t.registerWith=function(e){return i.isValidPhone(e)?(n.show({template:"Registering "+t.phoneNumber+"..."}),void r.register(t.phoneNumber).then(function(){n.hide(),a.alert({title:"Success",template:t.phoneNumber+" registered successfully."}).then(function(){t.enterMain()})})):void a.alert({title:"Invalid phone",template:"Please enter a valid phone number"})},t.register=function(){if("undefined"!=typeof cordova){var e=cordova.require("cordova/plugin/telephonenumber");e.get(function(e){e.length>0?(t.phoneNumber=e,t.registerWith(t.phoneNumber)):a.prompt({title:"Register",template:"Pease enter you phone number to register with us",inputType:"number",inputPlaceholder:"Phone Number"}).then(function(e){t.phoneNumber=e,t.registerWith(t.phoneNumber)})},function(t){alert("error = "+t.code)})}else t.phoneNumber="9808640958",t.registerWith(t.phoneNumber)}}]),module("yatayat.factories").factory("BaseModel",[function(){return{build:function(t){var e=Object.create(this);return angular.extend(e,t),e}}}]),module("yatayat.factories").factory("Modal",["$ionicModal",function(t){return{setup:function(e,o){t.fromTemplateUrl(o,{scope:e}).then(function(t){e.modal=t}),e.closeModal=function(){e.modal.hide()},e.showModal=function(){e.modal.show()}}}}]),module("yatayat.factories").factory("Navigator",["$state","$ionicViewService",function(t,e){return{go:function(o,r){t.go(o).then(function(){r&&e.clearHistory()})}}}]),module("yatayat.factories").factory("Post",["BaseModel","Raven",function(t){var e=[{id:1,title:"Accident at Koteshwor",description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."},{id:2,title:"Road Block at Sallaghari",description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}];return angular.extend(t,{all:function(o){var r=[];angular.forEach(e,function(e){r.push(t.build(e))}),o(r)},get:function(o,r){var n=e.filter(function(t){return t.id===parseInt(o)})[0];r(t.build(n))},descLength:function(){return this.description.length}})}]),module("yatayat.factories").factory("Raven",["$timeout","$q",function(t,e){return{get:function(){var o=e.defer();return t(function(){o.resolve()},1e3),o.promise},post:function(){var o=e.defer();return t(function(){o.resolve()},1e3),o.promise}}}]),module("yatayat.factories").factory("User",["Raven","$q",function(t,e){return{checkRegistration:function(){var o=e.defer();return t.get("users/:id").then(function(){o.resolve()}),o.promise},register:function(o){var r=e.defer();return t.post("users/new",{id:o}).then(function(){r.resolve()}),r.promise}}}]),module("yatayat.factories").factory("Validator",[function(){return{isValidPhone:function(t){var e=/^\d{10}$/;return t.match(e)}}}]);
//# sourceMappingURL=data:application/json;base64,